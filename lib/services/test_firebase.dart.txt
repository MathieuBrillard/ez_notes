// ignore_for_file: prefer_const_constructors_in_immutables,unnecessary_const,library_private_types_in_public_api,avoid_print, unnecessary_string_interpolations
// Copyright 2021, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: defaultFirebaseOptions);
  runApp(FirestoreExampleApp());
}

/// A reference to the list of Users.
/// We are using `withConverter` to ensure that interactions with the collection
/// are type-safe.
final usersRef =
    FirebaseFirestore.instance.collection('users').withConverter<User>(
          fromFirestore: (snapshots, _) => User.fromJson(snapshots.data()!),
          toFirestore: (user, _) => user.toJson(),
        );

/// The different ways that we can filter/sort movies.
enum UserQuery {
  nom,
  prenom,
}

extension on Query<User> {
  /// Create a firebase query from a [UserQuery]
  Query<User> queryBy(UserQuery query) {
    switch (query) {
      case UserQuery.nom:
        return orderBy('nom', descending: true);

      case UserQuery.prenom:
        return orderBy('prenom', descending: true);
    }
  }
}

/// The entry point of the application.
///
/// Returns a [MaterialApp].
class FirestoreExampleApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Test firebase',
      theme: ThemeData.dark(),
      home: const Scaffold(
        body: Center(child: UserList()),
      ),
    );
  }
}

/// Holds all example app films
class UserList extends StatefulWidget {
  const UserList({Key? key}) : super(key: key);

  @override
  _UserListState createState() => _UserListState();
}

class _UserListState extends State<UserList> {
  UserQuery query = UserQuery.nom;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            const Text('Example: Nom'),

            // This is a example use for 'snapshots in sync'.
            // The view reflects the time of the last Firestore sync; which happens any time a field is updated.
            StreamBuilder(
              stream: FirebaseFirestore.instance.snapshotsInSync(),
              builder: (context, _) {
                return Text(
                  'Latest Snapshot: ${DateTime.now()}',
                  style: Theme.of(context).textTheme.caption,
                );
              },
            )
          ],
        ),
        actions: <Widget>[
          PopupMenuButton<UserQuery>(
            onSelected: (value) => setState(() => query = value),
            icon: const Icon(Icons.sort),
            itemBuilder: (BuildContext context) {
              return [
                const PopupMenuItem(
                  value: UserQuery.nom,
                  child: Text('Trier par nom'),
                ),
                const PopupMenuItem(
                  value: UserQuery.prenom,
                  child: Text('Trier par prenom'),
                ),
              ];
            },
          ),
        ],
      ),
      body: StreamBuilder<QuerySnapshot<User>>(
        stream: usersRef.queryBy(query).snapshots(),
        builder: (context, snapshot) {
          if (snapshot.hasError) {
            return Center(
              child: Text(snapshot.error.toString()),
            );
          }

          if (!snapshot.hasData) {
            return const Center(child: CircularProgressIndicator());
          }

          final data = snapshot.requireData;

          return ListView.builder(
            itemCount: data.size,
            itemBuilder: (context, index) {
              return _UserItem(
                data.docs[index].data(),
              );
            },
          );
        },
      ),
    );
  }
}

/// A single user row.
class _UserItem extends StatelessWidget {
  _UserItem(this.user);

  final User user;

  /// Returns user details.
  Widget get details {
    return Padding(
      padding: const EdgeInsets.only(left: 8, right: 8),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          nom,
          prenom,
        ],
      ),
    );
  }

  /// Return the last names.
  Widget get nom {
    return Text(
      'Nom: ${user.nom}',
      style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
    );
  }

  /// Return the last names.
  Widget get prenom {
    return Text(
      'Prenom: ${user.prenom}',
      style: const TextStyle(fontSize: 18, fontWeight: FontWeight.normal),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 4, top: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Flexible(child: details),
        ],
      ),
    );
  }
}

@immutable
class User {
  User({
    required this.nom,
    required this.prenom,
  });

  User.fromJson(Map<String, Object?> json)
      : this(
          nom: json['nom']! as String,
          prenom: json['prenom']! as String,
        );

  final String nom;
  final String prenom;

  Map<String, Object?> toJson() {
    return {
      'nom': nom,
      'prenom': prenom,
    };
  }
}

const defaultFirebaseOptions = const FirebaseOptions(
  apiKey: 'AIzaSyDioOJNFlpoRWRJaCT7PqNDFb52e_TpnXg',
  appId: '1:804750076269:web:77270f9576f159b5945264',
  messagingSenderId: '804750076269',
  projectId: 'ez-notes-41e7f',
  authDomain: 'ez-notes-41e7f.firebaseapp.com',
  databaseURL:
      'https://ez-notes-41e7f-default-rtdb.europe-west1.firebasedatabase.app',
  storageBucket: 'ez-notes-41e7f.appspot.com',
  measurementId: 'G-BG9CY61S9L',
);
